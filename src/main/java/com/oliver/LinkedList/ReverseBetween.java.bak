package com.oliver.LinkedList;

import com.oliver.LinkedList.DeleteDuplicates.ListNode;

/**
 * Created by Yanliang Han on 2016/6/26.
 */
public class ReverseBetween {

    public static void main(String[] args) {
        testReverseBetween();
    }

    public static void testReverseBetween() {
        ListNode head = new ListNode(1);
        head.next = new ListNode(1);
        head.next.next = new ListNode(2);
        head.next.next.next = new ListNode(2);
        head.next.next.next.next = new ListNode(2);
        head.next.next.next.next.next = new ListNode(2);
        head.next.next.next.next.next.next = new ListNode(4);
        head.next.next.next.next.next.next.next = new ListNode(4);
        head.next.next.next.next.next.next.next.next = new ListNode(5);

        System.out.println(reverseBetween(head, 1, 2));
    }

    public static ListNode reverseBetween(ListNode head, int m, int n) {
        if (head == null || head.next == null) {
            return head;
        }

        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode slow = dummy;
        ListNode fast = head;
        while (fast != null) {
            if (fast.next != null && fast.val == fast.next.val) {
                int target = fast.val;
                while (fast != null && fast.val == target) {
                    fast = fast.next;
                }
                slow.next = fast;
            } else {
                slow = fast;
                fast = fast.next;
            }
        }

        return dummy.next;
    }
}
